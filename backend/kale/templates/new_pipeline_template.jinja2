import json
import kfp.dsl as kfp_dsl
from kfp.dsl import Input, Output, Dataset, HTML, Metrics, ClassificationMetrics, Artifact
from kubernetes import client as k8s_client

{{ lightweight_components | join('\n\n') }}

@kfp_dsl.pipeline(
    name='{{ pipeline_name }}',
    description='{{ pipeline_description }}'
)
def auto_generated_pipeline(
{%- for param_name, param_info in pipeline_param_info.items() %}
    {{ param_name.lower() }}: {{ param_info.type }} = {{ param_info.default | tojson }}{% if not loop.last %},{% endif %}
{%- endfor %}
):
    """Auto-generated pipeline function."""

{% set steps_list = pipeline.steps | list %}
{% for step in steps_list %}
    # {{ step.name }} component
    {{ step.name }}_task = {{ step.name }}(
    {%- for param_name, param_info in pipeline_param_info.items() %}
        {{ param_info.clean_name }}={{ param_name.lower() }}{% if step_inputs.get(step.name) %},{% endif %}
    {%- endfor %}
    {%- if step_inputs.get(step.name) %}
        {%- for input_var in step_inputs[step.name] %}
        {{ input_var }}_input={{ input_var }}_task.outputs["{{ input_var }}_output"]{% if not loop.last %},{% endif %}
        {%- endfor %}
    {%- endif %}
    )
    
    {% if loop.index0 > 0 %}
    # Set dependencies
    {%- if step_inputs.get(step.name) %}
    {%- for input_var in step_inputs[step.name] %}
    {{ step.name }}_task.after({{ input_var }}_task)
    {%- endfor %}
    {%- else %}
    {{ step.name }}_task.after({{ steps_list[loop.index0 - 1].name }}_task)
    {%- endif %}
    {% endif %}
    
    # Set display name
    {{ step.name }}_task.set_display_name("{{ step.name | title }}")

{% endfor %}

if __name__ == "__main__":
    from kfp import compiler
    from kfp import Client

    pipeline_filename = auto_generated_pipeline.__name__ + '.yaml'
    compiler.Compiler().compile(auto_generated_pipeline, pipeline_filename)

    print(f"Pipeline compiled to {pipeline_filename}")
    print("To run, upload this YAML to your KFP v2 instance or use kfp.Client().create_run_from_pipeline_func.")